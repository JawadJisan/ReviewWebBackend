generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model newUserModel {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now()) @map("createdAt")
  updatedAt      DateTime        @updatedAt @map("updatedAt")
  firstName      String?
  lastName       String?
  email          String          @unique
  userName       String          @unique
  password       String
  facebook       String?
  twitter        String?
  linkedIn       String?
  other          String?
  imageUrl       String?
  address        String?
  role           reviewUserRole  @default(user)
  Review         Review[]
  Comment        Comment[]
  ContactDetails ContactDetails?

  @@map("newUserModel")
}

model Review {
  id          String         @id @default(uuid())
  title       String
  description String
  rating      Float
  status      ListingStatus  @default(pending)
  author      newUserModel   @relation(fields: [userId], references: [id])
  userId      String
  product     ListingProduct @relation(fields: [productId], references: [id])
  productId   String
  comments    Comment[]
  other       Json?

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  // reviewUsers   reviewUsers? @relation(fields: [reviewUsersId], references: [id])
  // reviewUsersId String?
}

model Comment {
  id               String          @id @default(uuid())
  comment          String
  author           newUserModel    @relation(fields: [userId], references: [id])
  userId           String
  review           Review          @relation(fields: [reviewId], references: [id])
  reviewId         String
  // reviewUsers      reviewUsers?    @relation(fields: [reviewUsersId], references: [id])
  // reviewUsersId    String?
  ListingProduct   ListingProduct? @relation(fields: [listingProductId], references: [id])
  listingProductId String?
}

// reviewWeb
model ListingProduct {
  id          String        @id @default(uuid())
  featured    Boolean       @default(false)
  title       String
  price       String
  amenities   String[]
  parking     String
  management  String
  description String
  tags        String[]
  images      String[]
  status      ListingStatus @default(pending)
  category    String
  videoURL    String?
  authorID    String?

  state    String?
  zipCode  String?
  email    String?
  address  String?
  phone    String?
  website  String?
  facebook String?
  twitter  String?
  gitHub   String?

  reviews  Review[]
  comments Comment[]

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
}

model ContactDetails {
  id       String       @id @default(uuid())
  state    String
  zipCode  String
  email    String
  address  String
  phone    String
  website  String
  facebook String
  twitter  String
  gitHub   String
  userId   String       @unique
  user     newUserModel @relation(fields: [userId], references: [id])
}

enum ListingStatus {
  pending
  approved
  rejected
}

model reviewCategory {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  categoryName  String   @unique
  description   String?
  categoryImage String?

  @@map("reviewCategory")
}

// reviewWeb
enum reviewUserRole {
  user
  admin
  editor
  moderator
}

// model ReviewAndRating {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now()) @map("createdAt")
//   updatedAt DateTime @updatedAt @map("updatedAt")
//   userId String
//   user   Users  @relation(fields: [userId], references: [id])
//   serviceId String
//   service   AvailableService @relation(fields: [serviceId], references: [id])
//   rating Int
//   review String
//   @@map("review_and_rating")
// }

enum Gender {
  male
  female
}

enum UserRole {
  admin
  customer
  super_admin
  team_member
}

enum WeekDays {
  saturday
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
}

enum BookingStatus {
  pending
  confirmed
  rejected
}

enum PaymentStatus {
  paid
  notPaid
  rejected
}

enum PaymentMethod {
  cashOnDelivery
  online
}

enum NotificationStatus {
  booking
  confirmation
  reminder
}
